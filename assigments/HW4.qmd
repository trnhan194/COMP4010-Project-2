# Accessible Multi-Hue Gradient for Each Level of Granularity in the Data Series

This script generates a visually accessible multi-hue gradient based on a specified brand color and applies it to different levels of data granularity. The gradient is created by varying the opacity of the base color, and this gradient is then applied to a grid plot. Additionally, the script includes a function to adjust the gradient based on the number of data series.

```{r}
library(ggplot2)
library(scales)
library(dplyr)

# Define the brand color
brand_color <- "#F06C00" # Example brand color (you can change this)

# Create a function to generate a multi-hue gradient
create_gradient <- function(base_color, n_steps) {
  color_steps <- seq(1, 0.2, length.out = n_steps)
  colors <- sapply(color_steps, function(opacity) {
    alpha(base_color, opacity)
  })
  return(colors)
}

# Generate the gradient
gradient_colors <- create_gradient(brand_color, 8)
print(gradient_colors)

# Create an 8-column grid
grid_data <- expand.grid(x = 1:8, y = 1:1)

# Add the gradient colors to the grid
grid_data$color <- gradient_colors

# Plot the grid with colors
ggplot(grid_data, aes(x = x, y = y, fill = color)) +
  geom_tile(color = "white", size = 0.2) +
  scale_fill_identity() +
  theme_minimal() +
  theme(axis.text = element_blank(),
        axis.title = element_blank(),
        panel.grid = element_blank(),
        axis.ticks = element_blank())

# Function to adjust the gradient based on number of data series
adjust_gradient_for_series <- function(base_color, n_series) {
  gradient_colors <- create_gradient(base_color, n_series)
  grid_data <- expand.grid(x = 1:n_series, y = 1:1)
  grid_data$color <- gradient_colors
  return(grid_data)
}

# Example with 5 data series
n_series <- 5
adjusted_grid <- adjust_gradient_for_series(brand_color, n_series)

# Plot the adjusted grid
ggplot(adjusted_grid, aes(x = x, y = y, fill = color)) +
  geom_tile(color = "white", size = 0.2) +
  scale_fill_identity() +
  theme_minimal() +
  theme(axis.text = element_blank(),
        axis.title = element_blank(),
        panel.grid = element_blank(),
        axis.ticks = element_blank())
```

# Using Color to Emphasize the Most Important Data

This script demonstrates how to use color to highlight the most important data in a line chart. It plots three data series, with two in grey for context and one in blue to emphasize its significance.

```{r}
# Creating example data
set.seed(123)
df <- data.frame(
  Date = seq(as.Date("2023-01-01"), length = 100, by = "1 day"),
  Series1 = cumsum(runif(100, min = -1, max = 1)),
  Series2 = cumsum(runif(100, min = -1, max = 1)),
  Series3 = cumsum(runif(100, min = -1, max = 1))
)

ggplot(data = df, aes(x = Date)) +
  geom_line(aes(y = Series1, colour = "Grey Context"), size = 1, color = "grey") +
  geom_line(aes(y = Series2, colour = "Grey Context"), size = 1, color = "grey") +
  geom_line(aes(y = Series3, colour = "Highlight"), size = 1.2, color = "steelblue") +
  scale_color_manual(values = c("Grey Context" = "grey", "Highlight" = "steelblue")) +
  labs(title = "Effect of Color in Emphasizing Data",
       x = "Date",
       y = "Value",
       colour = "Legend") +
  theme_minimal() +
  theme(legend.position = "bottom")
```

# Intuitive Color for Pie Chart

This script creates pie charts with intuitive color schemes for different categories. Each pie chart represents different datasets with colors that are easy to interpret (e.g., green for "Good", red for "Bad").

```{r}
# Data
categories_good_bad <- c("Good", "Bad")
values_good_bad <- c(70, 30)
colors_good_bad <- c("green", "red")

# Data frame
data_good_bad <- data.frame(categories_good_bad, values_good_bad, colors_good_bad)

# Pie chart
ggplot(data_good_bad, aes(x = "", y = values_good_bad, fill = categories_good_bad)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +
  scale_fill_manual(values = colors_good_bad) +
  labs(title = "Good vs Bad Distribution", fill = "Categories") +
  theme_minimal() +
  theme(axis.title = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank())

# Data
categories_forest_ocean <- c("Forest", "Ocean")
values_forest_ocean <- c(50, 50)
colors_forest_ocean <- c("green", "blue")

# Data frame
data_forest_ocean <- data.frame(categories_forest_ocean, values_forest_ocean, colors_forest_ocean)

# Pie chart
ggplot(data_forest_ocean, aes(x = "", y = values_forest_ocean, fill = categories_forest_ocean)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +
  scale_fill_manual(values = colors_forest_ocean) +
  labs(title = "Forest vs Ocean Distribution", fill = "Categories") +
  theme_minimal() +
  theme(axis.title = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank())

# Data
categories_gender <- c("Male", "Female")
values_gender <- c(45, 55)
colors_gender <- c("blue", "pink")

# Data frame
data_gender <- data.frame(categories_gender, values_gender, colors_gender)

# Pie chart
ggplot(data_gender, aes(x = "", y = values_gender, fill = categories_gender)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +
  scale_fill_manual(values = colors_gender) +
  labs(title = "Gender Distribution", fill = "Categories") +
  theme_minimal() +
  theme(axis.title = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank())
```

# Changing Font

This script shows how to change the font in a ggplot2 plot by using Google Fonts. The example uses the "Roboto" font for all text elements in the plot.

```{r}
# Load necessary libraries
library(ggplot2)
library(showtext)

# Add Google font (e.g., Roboto)
font_add_google("Roboto", "roboto")

# Automatically use showtext to render text
showtext_auto()

# Create example data
data <- data.frame(
  category = c("A", "B", "C", "D"),
  value = c(3, 12, 5, 8)
)

# Create the bar plot with custom font
ggplot(data, aes(x = category, y = value)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  theme(
    text = element_text(family = "roboto", size = 12),
    axis.title = element_text(family = "roboto", size = 14),
    axis.text = element_text(family = "roboto", size = 12),
    plot.title = element_text(family = "roboto", size = 16, face = "bold")
  ) +
  labs(
    title = "Example Bar Plot",
    x = "Category",
    y = "Value"
  )
```

# Color Patterns

This script creates a pie chart with different colors and patterns for each category. Patterns add an extra layer of differentiation for better visual accessibility.

```{r}
library(ggplot2)
library(ggpattern)

# Sample data
data <- data.frame(
  category = c("A", "B", "C", "D"),
  value = c(40, 30, 20, 10)
)

# Create the pie chart
ggplot(data, aes(x = "", y = value, fill = category)) +
  geom_bar_pattern(
    aes(pattern = category), 
    stat = "identity", 
    position = "stack", 
    pattern_density = 0.2, 
    pattern_spacing = 0.05
  ) +
  coord_polar(theta = "y") +
  scale_fill_manual(values = c("A" = "red", "B" = "blue", "C" = "green", "D" = "yellow")) +
  scale_pattern_manual(values = c("A" = "stripe", "B" = "crosshatch", "C" = "circle", "D" = "none")) +
  theme_void() +
  theme(legend.position = "right") +
  labs(title = "Pie Chart with Different Colors and Patterns")
```

# Optional resource: 
To create a screen reader-accessible graph similar to Apple's using D3.js, refer to [this tutorial](https://fossheim.io/writing/posts/apple-dataviz-a11y-tutorial/).